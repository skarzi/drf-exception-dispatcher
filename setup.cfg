[tool:pytest]
junit_family = xunit2
norecursedirs =
    *.egg
    .eggs
    dist
    build
    docs
    .tox
    .git
    __pycache__
addopts =
    --strict-markers
    --doctest-modules
    --cov=.
    --cov-config=setup.cfg
    --cov-report=term
    --cov-report=xml
# test shouldn't take longer than 10s
timeout = 10


[flake8]
format = wemake
show-source = True
statistics = False
doctests = True
enable-extensions = G

# plugins
max-complexity = 6
max-line-length = 80
multiline-quotes = '''
pytest-fixture-no-parentheses = true
exclude =
    .git
    __pycache__
    .venv
    .eggs
    *.egg
ignore =
    # T003: add link on issue into TODO
    T003,
    # W503: line break before binary operator
    W503,

per-file-ignores =
    __init__.py:
        # D104:  Missing docstring in public package
        D104,
    exception_dispatcher/dispatchers/__init__.py:
        # WPS410: Found wrong metadata variable: __all__
        WPS410,
        # WPS412: Found `__init__.py` module with logic
        WPS412,
    tests/*.py:
        # D100: Missing docstring in public module
        D100,
        # S101: use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
        S101,
        # WPS432: Found magic number
        WPS432,
        # WPS442: Found outer scope names shadowing
        WPS442,
    tests/settings.py:
        # WPS407: Found mutable module constant
        WPS407,


[darglint]
docstring_style = numpy
strictness = long


[doc8]
ignore-path = docs/_build
max-line-length = 80
sphinx = True


[isort]
line_length = 80
indent = 4
include_trailing_comma = true
use_parentheses = true
multi_line_output = 3
# add one line between `import abc` and `from abc import ABC`
lines_between_types = 1
# split imports to multline, when 2 or more imports in one line
force_grid_wrap = 2
# add projects module to first party category
known_first_party = exception_dispatcher
# place imports, which section cannot be determined, to third party category
default_section = THIRDPARTY
sections = FUTURE,STDLIB,DJANGO,THIRDPARTY,FIRSTPARTY,LOCALFOLDER


[mypy]
allow_redefinition = False
check_untyped_defs = True
disallow_untyped_decorators = True
disallow_any_explicit = True
disallow_any_generics = True
disallow_untyped_calls = True
ignore_errors = False
ignore_missing_imports = True
implicit_reexport = False
strict_optional = True
strict_equality = True
no_implicit_optional = True
warn_unused_ignores = True
warn_redundant_casts = True
warn_unused_configs = True
warn_unreachable = True
warn_no_return = True
pretty = True
show_error_codes = True
plugins =
    mypy_django_plugin.main,
    mypy_drf_plugin.main

[mypy.plugins.django-stubs]
django_settings_module = "tests.settings"

[mypy-exception_dispatcher.types]                                                                                                                                                                 â”‚
disallow_any_explicit = False


[coverage:run]
branch = True
source = exception_dispatcher
omit = *conftest.py, pytest_plugins/*, */tests/*, .venv/*
data_file = .tests_reports/.coverage

[coverage:report]
skip_covered = True
show_missing = True
sort = Cover
fail_under = 100
exclude_lines =
    pragma: no cover
    # debug-only code
    if settings\.DEBUG
    # `mypy` only related code
    if typing\.TYPE_CHECKING
    if TYPE_CHECKING
    # defensive assertion code
    raise NotImplementedError
    except ImportError

[coverage:xml]
output = .tests_reports/coverage.xml

[coverage:json]
output = .tests_reports/coverage.json

[coverage:html]
directory = .tests_reports/htmlcov
